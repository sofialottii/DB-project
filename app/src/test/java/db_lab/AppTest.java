/*
 * This source file was generated by the Gradle 'init' task
 */
package db_lab;

import static org.assertj.core.api.Assertions.*;

import db_lab.data.DAOUtils;
import db_lab.data.Material;
import db_lab.data.Product;
import db_lab.data.ProductPreview;
import db_lab.data.Tag;
import db_lab.model.Model;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public final class AppTest {

    private static Connection connection;
    private static Savepoint savepoint;

    @BeforeClass
    public static void setup() throws SQLException {
        connection = DAOUtils.localMySQLConnection("tessiland", "root", "");

        // We do everything inside a transaction so that we won't pollute the
        // database with test data.
        connection.setAutoCommit(false);
        savepoint = connection.setSavepoint();
        try (var statement = connection.createStatement();) {
            statement.executeUpdate("insert into TAG values ('tag1'), ('tag2');");
            statement.executeUpdate("insert into MATERIAL values (1, 'linen'), (2, 'cotton');");
            statement.executeUpdate("insert into PRODUCT values (1, 'a', 'description a'), (2, 'b', 'description b');");
            statement.executeUpdate("insert into COMPOSITION values (1, 1, 0.6), (1, 2, 0.4);");
            statement.executeUpdate("insert into TAGGED values (1, 'tag1'), (1, 'tag2');");
        }
    }

    @AfterClass
    public static void cleanup() throws SQLException {
        if (connection != null) {
            if (savepoint != null) {
                connection.rollback(savepoint);
            }
            connection.close();
        }
    }

    @Test
    public void productTags() {
        var actual = Tag.DAO.ofProduct(connection, 1);
        var expected = Set.of(new Tag("tag1"), new Tag("tag2"));
        assertThat(actual).hasSameElementsAs(expected);
    }

    @Test
    public void productComposition() {
        var actual = Material.DAO.forProduct(connection, 1);
        var expected = Map.ofEntries(
            Map.entry(new Material(1, "linen"), 0.6f),
            Map.entry(new Material(2, "cotton"), 0.4f)
        );
        assertThat(actual).isEqualTo(expected);
    }

    @Test
    public void productPreviews() {
        var actual = ProductPreview.DAO.list(connection);
        var expected = List.of(
            new ProductPreview(1, "a", Set.of(new Tag("tag1"), new Tag("tag2"))),
            new ProductPreview(2, "b", Set.of())
        );
        assertThat(actual).hasSameElementsAs(expected);
    }

    @Test
    public void product() {
        var actual = Product.DAO.find(connection, 1);
        var expectedComposition = Map.ofEntries(
            Map.entry(new Material(1, "linen"), 0.6f),
            Map.entry(new Material(2, "cotton"), 0.4f)
        );
        var expected = new Product(1, "a", "description a", expectedComposition);
        assertThat(actual).isPresent().hasValue(expected);
    }
}
